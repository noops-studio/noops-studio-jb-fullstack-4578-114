
# ui/components/home/Welcome.tsx
import React from 'react';

const Welcome: React.FC = () => {
  return (
    <div className="text-center py-8 max-w-4xl mx-auto">
      <h2 className="text-3xl font-bold mb-6 text-indigo-700">Welcome to the Gift Shop!</h2>
      <p className="text-lg text-gray-700 mb-6">Find the perfect gift for every occasion.</p>
      <img 
        src="src/assets/images/DALLÂ·E 2025-02-28 21.51.18 - A cozy and inviting gift shop with shelves filled with colorful presents, neatly wrapped gift boxes, and decorative ribbons. The shop has a warm ambia.webp" 
        alt="Gift Shop" 
        className="mt-6 mx-auto rounded-lg shadow-lg max-w-full h-auto"
      />
    </div>
  );
};

export default Welcome;
# ui/components/common/Navbar.tsx
import React from 'react';
import { Link } from 'react-router-dom';

const Navbar: React.FC = () => {
  return (
    <nav className="bg-gradient-to-r from-indigo-600 to-blue-500 shadow-md">
      <div className="container mx-auto px-6 py-3">
        <ul className="flex items-center space-x-8">
          <li>
            <Link to="/" className="text-white hover:text-indigo-200 font-medium transition duration-200">
              Home
            </Link>
          </li>
          <li>
            <Link to="/gifts" className="text-white hover:text-indigo-200 font-medium transition duration-200">
              Gifts
            </Link>
          </li>
          <li>
            <Link to="/add-gift" className="text-white hover:text-indigo-200 font-medium transition duration-200">
              Add Gift
            </Link>
          </li>
        </ul>
      </div>
    </nav>
  );
};

export default Navbar;

# ui/components/common/Footer.tsx
import React from 'react';

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-800 text-white py-6">
      <div className="container mx-auto px-6 text-center">
        <p>&copy; {new Date().getFullYear()} Gift Shop. All rights reserved.</p>
        <div className="mt-4 flex justify-center space-x-6">
          <a href="#" className="text-gray-400 hover:text-white">
            Privacy Policy
          </a>
          <a href="#" className="text-gray-400 hover:text-white">
            Terms of Service
          </a>
          <a href="#" className="text-gray-400 hover:text-white">
            Contact Us
          </a>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

# ui/components/common/Layout.tsx
import React from 'react';
import Header from './Header';
import Navbar from './Navbar';
import Footer from './Footer';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <Navbar />
      <main className="flex-grow container mx-auto p-4">
        {children}
      </main>
      <Footer />
    </div>
  );
};

export default Layout;

# ui/components/common/Header.tsx
import React from 'react';

const Header: React.FC = () => {
  return (
    <header className="bg-indigo-700 text-white shadow-md">
      <div className="container mx-auto px-6 py-4 flex items-center">
        <h1 className="text-2xl font-bold">Gift Shop</h1>
        <div className="ml-auto flex items-center space-x-4">
          <button className="bg-white text-indigo-700 px-4 py-2 rounded-md font-medium shadow hover:bg-indigo-100 transition duration-200">
            Sign In
          </button>
          <div className="relative">
            <span className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full text-xs w-5 h-5 flex items-center justify-center">3</span>
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"></path>
            </svg>
          </div>
        </div>
      </div>
    </header>
  );
};

export default Header;

# ui/components/common/Loading.tsx
import React from 'react';

const Loading: React.FC = () => {
  return (
    <div className="flex justify-center items-center py-12">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-indigo-600"></div>
      <span className="ml-3 text-indigo-600 font-medium">Loading...</span>
    </div>
  );
};

export default Loading;

# ui/components/gifts/GiftForm.tsx
import React, { useState, useEffect } from 'react';
import { Gift } from '../../../backend/models/Gift';
import { Target } from '../../../backend/models/Target';
import targetService from '../../../backend/services/targetService';
import { validateGift } from '../../../backend/utils/validation';
import giftService from '../../../backend/services/giftService';

interface GiftFormProps {
  onGiftAdded: () => void;
}

const GiftForm: React.FC<GiftFormProps> = ({ onGiftAdded }) => {
  const [gift, setGift] = useState<Partial<Gift>>({
    targetId: 0,
    name: '',
    description: '',
    price: 0,
    discount: 0
  });
  const [errors, setErrors] = useState<string[]>([]);
  const [targets, setTargets] = useState<Target[]>([]);
  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);

  useEffect(() => {
    const fetchTargets = async () => {
      const data = await targetService.getTargets();
      setTargets(data);
    };
    fetchTargets();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setGift((prev) => ({ 
      ...prev, 
      [name]: name === 'targetId' || name === 'price' || name === 'discount' ? Number(value) : value 
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const validationErrors = validateGift(gift as Gift);
    
    if (validationErrors.length > 0) {
      setErrors(validationErrors);
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      await giftService.addGift(gift);
      setGift({ targetId: 0, name: '', description: '', price: 0, discount: 0 });
      setErrors([]);
      onGiftAdded();
    } catch (error) {
      setErrors(['An error occurred while adding the gift. Please try again.']);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-2xl mx-auto bg-white p-8 rounded-lg shadow-md">
      {errors.length > 0 && (
        <div className="bg-red-50 text-red-600 p-4 rounded-md mb-6 border border-red-200">
          {errors.map((err, idx) => (
            <div key={idx} className="flex items-center mb-1 last:mb-0">
              <svg className="w-4 h-4 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd"></path>
              </svg>
              {err}
            </div>
          ))}
        </div>
      )}
      
      <div className="mb-6">
        <label className="block text-gray-700 font-medium mb-2">Target Audience:</label>
        <select 
          name="targetId" 
          value={gift.targetId} 
          onChange={handleChange} 
          className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
        >
          <option value={0}>Select Target</option>
          {targets.map((target) => (
            <option key={target.id} value={target.id}>{target.type}</option>
          ))}
        </select>
      </div>
      
      <div className="mb-6">
        <label className="block text-gray-700 font-medium mb-2">Name:</label>
        <input 
          type="text" 
          name="name" 
          value={gift.name} 
          onChange={handleChange} 
          className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      
      <div className="mb-6">
        <label className="block text-gray-700 font-medium mb-2">Description:</label>
        <textarea 
          name="description" 
          value={gift.description} 
          onChange={handleChange} 
          rows={4}
          className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
        ></textarea>
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div>
          <label className="block text-gray-700 font-medium mb-2">Price ($):</label>
          <input 
            type="number" 
            name="price" 
            value={gift.price} 
            onChange={handleChange} 
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
        </div>
        <div>
          <label className="block text-gray-700 font-medium mb-2">Discount (%):</label>
          <input 
            type="number" 
            name="discount" 
            value={gift.discount} 
            onChange={handleChange} 
            className="w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
          />
        </div>
      </div>
      
      <button 
        type="submit" 
        disabled={isSubmitting}
        className={`w-full bg-indigo-600 text-white font-medium py-3 px-4 rounded-md shadow hover:bg-indigo-700 transition duration-200 ${isSubmitting ? 'opacity-70 cursor-not-allowed' : ''}`}
      >
        {isSubmitting ? (
          <span className="flex items-center justify-center">
            <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Adding...
          </span>
        ) : 'Add Gift'}
      </button>
    </form>
  );
};

export default GiftForm;

# ui/components/gifts/GiftFilter.tsx
import React from 'react';
import { Target } from '../../../backend/models/Target';

interface GiftFilterProps {
  targets: Target[];
  selectedTarget: number;
  onChange: (targetId: number) => void;
}

const GiftFilter: React.FC<GiftFilterProps> = ({ targets, selectedTarget, onChange }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md mb-8">
      <div className="flex flex-col sm:flex-row sm:items-center">
        <label className="text-gray-700 font-medium mb-2 sm:mb-0 sm:mr-4">Choose Target Audience: </label>
        <select
          value={selectedTarget}
          onChange={(e) => onChange(Number(e.target.value))}
          className="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500 bg-white"
        >
          <option value={0}>All Targets</option>
          {targets.map((target) => (
            <option key={target.id} value={target.id}>{target.type}</option>
          ))}
        </select>
      </div>
    </div>
  );
};

export default GiftFilter;

# ui/components/gifts/GiftCard.tsx
import React, { useState } from 'react';
import giftService from '../../../backend/services/giftService';
import { Gift } from '../../../backend/models/Gift';

interface GiftCardProps {
  gift: Gift;
  onDelete: (id: number) => void;
}

const GiftCard: React.FC<GiftCardProps> = ({ gift, onDelete }) => {
  const [isDeleting, setIsDeleting] = useState<boolean>(false);
  const [showConfirm, setShowConfirm] = useState<boolean>(false);
  
  const finalPrice = gift.price * (1 - gift.discount / 100);

  const handleDeleteClick = () => {
    setShowConfirm(true);
  };

  const handleCancelDelete = () => {
    setShowConfirm(false);
  };

  const handleConfirmDelete = async () => {
    setIsDeleting(true);
    try {
      await giftService.deleteGift(gift.id);
      onDelete(gift.id);
    } catch (error) {
      console.error("Failed to delete gift:", error);
    } finally {
      setIsDeleting(false);
      setShowConfirm(false);
    }
  };

  return (
    <div className="bg-white rounded-lg overflow-hidden shadow-lg transition-transform duration-300 hover:shadow-xl hover:-translate-y-1">
      <div className="p-5">
        <h3 className="font-bold text-xl text-gray-800 mb-2">{gift.name}</h3>
        <p className="text-gray-600 mb-4">{gift.description}</p>
        
        <div className="flex items-center justify-between mb-4">
          <div>
            {gift.discount > 0 ? (
              <div>
                <span className="line-through text-gray-500 mr-2">${gift.price.toFixed(2)}</span>
                <span className="text-lg font-bold text-indigo-600">${finalPrice.toFixed(2)}</span>
              </div>
            ) : (
              <span className="text-lg font-bold text-indigo-600">${gift.price.toFixed(2)}</span>
            )}
          </div>
          
          {gift.discount > 0 && (
            <span className="bg-red-100 text-red-800 text-sm font-medium px-2.5 py-0.5 rounded">
              {gift.discount}% OFF
            </span>
          )}
        </div>
        
        <div className="flex justify-between items-center">
          <button className="bg-indigo-100 text-indigo-700 px-4 py-2 rounded font-medium hover:bg-indigo-200 transition duration-200">
            View Details
          </button>
          
          {!showConfirm ? (
            <button 
              onClick={handleDeleteClick} 
              className="text-red-600 hover:text-red-800 font-medium"
            >
              Delete
            </button>
          ) : (
            <div className="flex space-x-2">
              <button 
                onClick={handleCancelDelete}
                className="text-gray-600 hover:text-gray-800 text-sm font-medium"
                disabled={isDeleting}
              >
                Cancel
              </button>
              <button 
                onClick={handleConfirmDelete} 
                className="text-red-600 hover:text-red-800 text-sm font-medium flex items-center"
                disabled={isDeleting}
              >
                {isDeleting ? (
                  <>
                    <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Deleting...
                  </>
                ) : 'Confirm'}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default GiftCard;

# ui/components/gifts/GiftList.tsx
import React from "react";
import GiftCard from "./GiftCard";
import { Gift } from "../../../backend/models/Gift";

interface GiftListProps {
  gifts: Gift[];
  refreshGifts: () => void;
}

const GiftList: React.FC<GiftListProps> = ({ gifts, refreshGifts }) => {
  const handleDelete = (deletedId: number) => {
    refreshGifts();
  };

  if (gifts.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center p-12 bg-white rounded-lg shadow text-center">
        <svg
          className="w-16 h-16 text-gray-400 mb-4"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
          ></path>
        </svg>
        <h3 className="text-xl font-medium text-gray-700 mb-2">
          No gifts found
        </h3>
        <p className="text-gray-500">
          Select a different target or add some gifts to get started!
        </p>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {gifts.map((gift) => (
        <GiftCard key={gift.id} gift={gift} onDelete={handleDelete} />
      ))}
    </div>
  );
};

export default GiftList;

# ui/pages/AddGiftPage.tsx
import React, { useState, useEffect } from 'react';
import GiftForm from '../components/gifts/GiftForm';

const AddGiftPage: React.FC = () => {
  const [message, setMessage] = useState<string>('');
  const [showMessage, setShowMessage] = useState<boolean>(false);

  const handleGiftAdded = () => {
    setMessage('Gift added successfully!');
    setShowMessage(true);
    
    // Auto-hide the message after 5 seconds
    const timer = setTimeout(() => {
      setShowMessage(false);
    }, 5000);
    
    return () => clearTimeout(timer);
  };

  return (
    <div>
      <h2 className="text-3xl font-bold mb-8 text-center text-gray-800">Add a New Gift</h2>
      
      {showMessage && (
        <div className="max-w-2xl mx-auto mb-8 bg-green-50 border-l-4 border-green-500 p-4 rounded-md">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-green-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-green-700">{message}</p>
            </div>
            <div className="ml-auto pl-3">
              <div className="-mx-1.5 -my-1.5">
                <button 
                  onClick={() => setShowMessage(false)}
                  className="inline-flex text-green-500 hover:text-green-700"
                >
                  <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clipRule="evenodd"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <GiftForm onGiftAdded={handleGiftAdded} />
    </div>
  );
};

export default AddGiftPage;

# ui/pages/GiftsPage.tsx
import React, { useState, useEffect } from 'react';
import GiftFilter from '../components/gifts/GiftFilter';
import GiftList from '../components/gifts/GiftList';
import targetService from '../../backend/services/targetService';
import giftService from '../../backend/services/giftService';
import { Target } from '../../backend/models/Target';
import { Gift } from '../../backend/models/Gift';
import Loading from '../components/common/Loading';

const GiftsPage: React.FC = () => {
  const [targets, setTargets] = useState<Target[]>([]);
  const [selectedTarget, setSelectedTarget] = useState<number>(0);
  const [gifts, setGifts] = useState<Gift[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchTargets = async () => {
      try {
        const data = await targetService.getTargets();
        setTargets(data);
      } catch (err) {
        setError('Failed to load target categories. Please try again later.');
      }
    };
    fetchTargets();
  }, []);

  useEffect(() => {
    const fetchGifts = async () => {
      setLoading(true);
      setError(null);
      try {
        const data = await giftService.getGiftsByTarget(selectedTarget);
        setGifts(data);
      } catch (err) {
        setError('Failed to load gifts. Please try again later.');
      } finally {
        setLoading(false);
      }
    };
    fetchGifts();
  }, [selectedTarget]);

  const refreshGifts = async () => {
    setLoading(true);
    try {
      const data = await giftService.getGiftsByTarget(selectedTarget);
      setGifts(data);
    } catch (err) {
      setError('Failed to refresh gifts. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2 className="text-3xl font-bold mb-8 text-center text-gray-800">Browse Our Gifts</h2>
      
      <GiftFilter targets={targets} selectedTarget={selectedTarget} onChange={setSelectedTarget} />
      
      {error && (
        <div className="bg-red-50 border-l-4 border-red-500 p-4 mb-8 rounded-md">
          <div className="flex">
            <div className="flex-shrink-0">
              <svg className="h-5 w-5 text-red-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
            </div>
            <div className="ml-3">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}
      
      {loading ? (
        <Loading />
      ) : (
        <GiftList gifts={gifts} refreshGifts={refreshGifts} />
      )}
    </div>
  );
};

export default GiftsPage;
# ui/pages/HomePage.tsx
import React from 'react';
import Welcome from '../components/home/Welcome';
import { Link } from 'react-router-dom';

const HomePage: React.FC = () => {
  const featuredCategories = [
    { id: 1, name: 'Birthday Gifts', icon: 'ð' },
    { id: 2, name: 'Wedding Gifts', icon: 'ð' },
    { id: 3, name: 'Anniversary Gifts', icon: 'ð' },
  ];

  return (
    <div>
      <Welcome />
      
      <section className="my-16">
        <h2 className="text-2xl font-bold mb-8 text-center text-gray-800">Featured Categories</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
          {featuredCategories.map(category => (
            <div key={category.id} className="bg-white p-6 rounded-lg shadow-md text-center hover:shadow-lg transition-shadow duration-300">
              <div className="text-4xl mb-4">{category.icon}</div>
              <h3 className="text-xl font-semibold mb-3 text-indigo-700">{category.name}</h3>
              <Link to="/gifts" className="text-indigo-600 hover:text-indigo-800 font-medium">
                Browse Collection â
              </Link>
            </div>
          ))}
        </div>
      </section>
      
      <section className="my-16 bg-indigo-50 py-12 px-6 rounded-lg">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-2xl font-bold mb-4 text-indigo-800">Why Choose Our Gift Shop?</h2>
          <p className="text-gray-700 mb-8">We offer a curated selection of unique gifts for every occasion, with fast shipping and easy returns.</p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="p-4">
              <div className="bg-white w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center shadow-md">
                <svg className="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"></path>
                </svg>
              </div>
              <h3 className="font-semibold text-lg">Unique Selection</h3>
              <p className="text-gray-600 mt-2">Carefully curated gifts you won't find anywhere else.</p>
            </div>
            
            <div className="p-4">
              <div className="bg-white w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center shadow-md">
                <svg className="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h3 className="font-semibold text-lg">Fast Delivery</h3>
              <p className="text-gray-600 mt-2">Get your gifts quickly with our expedited shipping options.</p>
            </div>
            
            <div className="p-4">
              <div className="bg-white w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center shadow-md">
                <svg className="w-8 h-8 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905a3.61 3.61 0 01-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5"></path>
                </svg>
              </div>
              <h3 className="font-semibold text-lg">Satisfaction Guaranteed</h3>
              <p className="text-gray-600 mt-2">Easy returns and exchanges if you're not completely satisfied.</p>
            </div>
          </div>
          
          <Link to="/gifts" className="mt-8 inline-block bg-indigo-600 text-white font-medium px-6 py-3 rounded-md shadow hover:bg-indigo-700 transition duration-200">
            Explore Our Collection
          </Link>
        </div>
      </section>
      
      <section className="my-16">
        <h2 className="text-2xl font-bold mb-8 text-center text-gray-800">Our Latest Arrivals</h2>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          {[1, 2, 3, 4].map(item => (
            <div key={item} className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300">
              <div className="h-48 bg-gray-200 flex items-center justify-center">
                <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
              <div className="p-4">
                <h3 className="font-semibold text-lg text-gray-800">Gift Item #{item}</h3>
                <p className="text-gray-600 text-sm mt-1">Perfect for any occasion</p>
                <div className="mt-4 flex justify-between items-center">
                  <span className="font-bold text-indigo-600">$24.99</span>
                  <button className="bg-indigo-100 text-indigo-700 px-3 py-1 rounded text-sm font-medium hover:bg-indigo-200 transition duration-200">
                    View Details
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="text-center mt-8">
          <Link to="/gifts" className="text-indigo-600 hover:text-indigo-800 font-medium">
            View All Gifts â
          </Link>
        </div>
      </section>
      
      <section className="my-16 bg-indigo-600 text-white py-12 px-6 rounded-lg text-center">
        <h2 className="text-2xl font-bold mb-4">Join Our Newsletter</h2>
        <p className="mb-6 max-w-2xl mx-auto">Sign up to receive updates on new gift arrivals, special promotions, and seasonal offers.</p>
        
        <div className="max-w-md mx-auto flex">
          <input 
            type="email" 
            placeholder="Your email address" 
            className="flex-grow p-3 rounded-l-md text-gray-800 focus:outline-none"
          />
          <button className="bg-indigo-800 px-6 py-3 rounded-r-md font-medium hover:bg-indigo-900 transition duration-200">
            Subscribe
          </button>
        </div>
      </section>
    </div>
  );
};

export default HomePage;
# App.tsx
import React from 'react';
import { Routes, Route } from 'react-router-dom';
import Layout from './ui/components/common/Layout';
import HomePage from './ui/pages/HomePage';
import GiftsPage from './ui/pages/GiftsPage';
import AddGiftPage from './ui/pages/AddGiftPage';


const App: React.FC = () => {
  return (
    <Layout>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/gifts" element={<GiftsPage />} />
        <Route path="/add-gift" element={<AddGiftPage />} />
      </Routes>
    </Layout>
  );
};

export default App;

# main.tsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'
import { BrowserRouter } from 'react-router-dom'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <BrowserRouter>
    <App />
    </BrowserRouter>
  </StrictMode>,
)

# index.css
@import "tailwindcss";
@tailwind components;
@tailwind utilities;
# backend/utils/validation.ts
export const validateGift = (gift: {
    targetId: number;
    name: string;
    description: string;
    price: number;
    discount: number;
  }) => {
    const errors: string[] = [];
    if (!gift.targetId) errors.push('Target is required.');
    if (!gift.name) errors.push('Name is required.');
    if (!gift.description) errors.push('Description is required.');
    if (gift.price == null || gift.price < 0) errors.push('Price must be non-negative.');
    if (gift.discount == null || gift.discount < 0 || gift.discount > 100) errors.push('Discount must be between 0 and 100.');
    return errors;
  };
  
# backend/models/Gift.ts
export interface Gift {
    id: number;
    targetId: number;
    name: string;
    description: string;
    price: number;
    discount: number;
  }
  
# backend/models/Target.ts
export interface Target {
    id: number;
    type: string;
  }
  
# backend/services/giftService.ts
import api from './api';
import { Gift } from '../models/Gift';

const getGiftsByTarget = async (targetId: number): Promise<Gift[]> => {
  const response = await api.get(`/gifts/${targetId}`);
  return response.data;
};

const addGift = async (gift: Partial<Gift>): Promise<Gift> => {
  const response = await api.post('/gifts', gift);
  return response.data;
};

const deleteGift = async (id: number): Promise<void> => {
  await api.delete(`/gifts/${id}`);
};

export default { getGiftsByTarget, addGift, deleteGift };

# backend/services/api.ts
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:3000/api'
});

export default api;

# backend/services/targetService.ts
import api from './api';
import { Target } from '../models/Target';

const getTargets = async (): Promise<Target[]> => {
  const response = await api.get('/targets');
  return response.data;
};

export default { getTargets };

# vite-env.d.ts
/// <reference types="vite/client" />

